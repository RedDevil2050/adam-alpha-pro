version: '3.8'

services:
  # Backend API Service
  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
    image: zion-backend:latest
    container_name: zion-backend
    restart: always
    ports:
      - "8000:8000"
    environment:
      - ENV=production
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD:-zionpassword}@db:5432/ziondb
      - REDIS_URL=redis://redis:6379/0
      - JWT_SECRET_KEY=${JWT_SECRET_KEY:-secure-jwt-secret-key-must-be-changed-in-production}
      # Add any other environment variables here
    depends_on:
      - db
      - redis
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
      - ./backups:/app/backups
    networks:
      - zion-network
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s

  # Frontend Web Service
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    image: zion-frontend:latest
    container_name: zion-frontend
    restart: always
    ports:
      - "80:80"
    depends_on:
      - backend
    networks:
      - zion-network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:80/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    container_name: zion-db
    restart: always
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-zionpassword}
      - POSTGRES_DB=ziondb
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - zion-network
    deploy:
      resources:
        limits:
          cpus: '0.7'
          memory: 512M
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: zion-redis
    restart: always
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redispassword}
    volumes:
      - redis_data:/data
    networks:
      - zion-network
    deploy:
      resources:
        limits:
          cpus: '0.3'
          memory: 256M
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 5s

  # Prometheus metrics collection
  prometheus:
    image: prom/prometheus:v2.44.0
    container_name: zion-prometheus
    restart: always
    volumes:
      - ./monitoring/prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    ports:
      - "9090:9090"
    networks:
      - zion-network
    deploy:
      resources:
        limits:
          cpus: '0.2'
          memory: 256M

  # Grafana dashboard
  grafana:
    image: grafana/grafana:10.0.0
    container_name: zion-grafana
    restart: always
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-adminpassword}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana:/etc/grafana/provisioning
    depends_on:
      - prometheus
    networks:
      - zion-network
    deploy:
      resources:
        limits:
          cpus: '0.2'
          memory: 256M

networks:
  zion-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:
