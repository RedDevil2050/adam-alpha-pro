#!/bin/bash

echo "üîç Starting Pre-Market Deployment System Test..."

# Set error handling
set -e

# Load environment variables
if [ -f ".env.production" ]; then
    source .env.production
    echo "‚úÖ Production environment variables loaded"
else
    echo "‚ö†Ô∏è Production environment file not found, using existing environment"
fi

# Check if Docker is running
if ! docker info >/dev/null 2>&1; then
    echo "‚ùå Docker is not running"
    exit 1
fi
echo "‚úÖ Docker is running"

# Test docker-compose build
echo "Building containers..."
if ! docker-compose -f docker-compose.yml build; then
    echo "‚ùå Container build failed"
    exit 1
fi
echo "‚úÖ Container build successful"

# Start services
echo "Starting services..."
docker-compose -f docker-compose.yml up -d

# Wait for services to be ready
echo "Waiting for services to be ready..."
MAX_RETRIES=30
RETRY_COUNT=0

while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
    if curl -s http://localhost:8000/api/health | grep -q "status.*ok"; then
        echo "‚úÖ System is ready!"
        break
    fi
    
    echo "System not ready yet, waiting... ($RETRY_COUNT/$MAX_RETRIES)"
    RETRY_COUNT=$((RETRY_COUNT+1))
    sleep 10
done

if [ $RETRY_COUNT -eq $MAX_RETRIES ]; then
    echo "‚ùå System failed to start within the expected time"
    docker-compose logs
    exit 1
fi

# Test Redis
echo "Testing Redis connection..."
if ! docker-compose exec redis redis-cli ping | grep -q "PONG"; then
    echo "‚ùå Redis connection failed"
    exit 1
fi
echo "‚úÖ Redis connection successful"

# Test PostgreSQL
echo "Testing PostgreSQL connection..."
if ! docker-compose exec postgres pg_isready -U zion_production; then
    echo "‚ùå PostgreSQL connection failed"
    exit 1
fi
echo "‚úÖ PostgreSQL connection successful"

# Enhanced error diagnostics
check_service_status() {
    local service=$1
    echo "Diagnosing $service service..."
    docker-compose ps $service
    docker-compose logs --tail=50 $service
}

# Check container status
echo "Checking container status..."
CONTAINERS=$(docker-compose ps -q)
if [ -z "$CONTAINERS" ]; then
    echo "‚ùå No containers running!"
    echo "Checking for startup errors..."
    docker-compose logs
    exit 1
fi

# Enhanced API health check
echo "Testing API health..."
if ! curl -f -s "http://localhost:8000/api/health" > /dev/null; then
    echo "‚ùå API health check failed"
    echo "Diagnosing API issues..."
    check_service_status backend
    echo "Checking network connectivity..."
    docker network ls
    docker network inspect $(docker network ls --filter name=zion -q)
    echo "Checking API logs for errors..."
    docker-compose logs backend --tail=100
    exit 1
fi
echo "‚úÖ API health check successful"

# Test market symbols
echo "Testing market symbols access..."
if ! curl -f -s "http://localhost:8000/api/symbols" | grep -q "symbols"; then
    echo "‚ùå Market symbols check failed"
    exit 1
fi
echo "‚úÖ Market symbols check successful"

# Get auth token for API tests
echo "Getting authentication token for API tests..."
AUTH_RESPONSE=$(curl -s -X POST -H "Content-Type: application/json" -d '{"username":"admin","password":"'"$API_PASS"'"}' http://localhost:8000/api/auth/token)
API_TOKEN=$(echo $AUTH_RESPONSE | grep -o '"access_token":"[^"]*' | cut -d'"' -f4)

if [ -z "$API_TOKEN" ]; then
    echo "‚ùå Failed to get authentication token"
    echo "Response: $AUTH_RESPONSE"
    exit 1
fi
echo "‚úÖ Authentication token obtained"

# Check API authentication
echo "Verifying API authentication..."
if ! curl -f -s -H "Authorization: Bearer $API_TOKEN" "http://localhost:8000/api/auth/verify" > /dev/null; then
    echo "‚ùå API authentication verification failed"
    exit 1
fi
echo "‚úÖ API authentication verification successful"

# Check configuration validation
echo "Validating configurations..."
if [ -z "$API_PASS" ]; then
    echo "‚ùå API_PASS not set in environment"
    exit 1
fi

# Check environment variables for market trading
echo "Checking market environment variables..."
if [ -z "$ALLOWED_PAIRS" ]; then
    echo "‚ùå ALLOWED_PAIRS not configured"
    exit 1
fi

# Verify API keys for data providers
echo "Verifying data provider API keys..."
for provider in YAHOO_FINANCE_API_KEY ALPHA_VANTAGE_KEY FINNHUB_API_KEY POLYGON_API_KEY; do
    if [ -z "${!provider}" ]; then
        echo "‚ùå $provider not set in environment"
        exit 1
    else
        echo "‚úÖ $provider is configured"
    fi
done

# Enhanced resource monitoring
echo "Checking system resources..."
CPU_USAGE=$(top -bn1 | grep "Cpu(s)" | awk '{print $2}')
if [ $(echo "$CPU_USAGE > 80" | bc) -eq 1 ]; then
    echo "‚ö†Ô∏è Warning: High CPU usage detected: $CPU_USAGE%"
fi

MEM_FREE=$(free -m | awk 'NR==2{print $4}')
DISK_FREE=$(df -h / | awk 'NR==2{print $4}')
echo "CPU Usage: $CPU_USAGE%"
echo "Free Memory: $MEM_FREE MB"
echo "Free Disk Space: $DISK_FREE"

if [ $(echo "$MEM_FREE < 1024" | bc) -eq 1 ]; then
    echo "‚ö†Ô∏è Critical: Low memory available: $MEM_FREE MB"
fi

# Test Prometheus metrics endpoint
echo "Testing Prometheus metrics endpoint..."
if ! curl -f -s "http://localhost:9090/-/healthy" > /dev/null; then
    echo "‚ö†Ô∏è Warning: Prometheus health check failed"
else
    echo "‚úÖ Prometheus health check successful"
fi

# Test Grafana availability
echo "Testing Grafana availability..."
if ! curl -f -s "http://localhost:3000/api/health" > /dev/null; then
    echo "‚ö†Ô∏è Warning: Grafana health check failed"
else
    echo "‚úÖ Grafana health check successful"
fi

# Run basic load test with improved error handling
echo "Running load test..."
SUCCESS_COUNT=0
FAILURE_COUNT=0

for i in {1..100}; do
    STATUS=$(curl -s -o /dev/null -w "%{http_code}" "http://localhost:8000/api/symbols")
    if [ "$STATUS" == "200" ]; then
        SUCCESS_COUNT=$((SUCCESS_COUNT+1))
    else
        FAILURE_COUNT=$((FAILURE_COUNT+1))
    fi
done

echo "Load test results: $SUCCESS_COUNT successful, $FAILURE_COUNT failed"
if [ "$FAILURE_COUNT" -gt 0 ]; then
    echo "‚ö†Ô∏è Warning: Load test had $FAILURE_COUNT failures"
    if [ "$FAILURE_COUNT" -gt 20 ]; then
        echo "‚ùå Load test failure rate too high: $FAILURE_COUNT%"
        exit 1
    fi
else
    echo "‚úÖ Load test completed successfully"
fi

# Check for data provider functionality with advanced error handling
echo "Testing data provider functionality..."
IFS=',' read -ra PAIRS <<< "$ALLOWED_PAIRS"
PROVIDER_FAILURES=0

for pair in "${PAIRS[@]}"; do
    echo "Testing market data for $pair..."
    PRICE_DATA=$(curl -s -H "Authorization: Bearer $API_TOKEN" "http://localhost:8000/api/market/price/$pair")
    
    if ! echo "$PRICE_DATA" | grep -q "price"; then
        echo "‚ùå Failed to get price data for $pair"
        echo "Response: $PRICE_DATA"
        PROVIDER_FAILURES=$((PROVIDER_FAILURES+1))
    else
        echo "‚úÖ Price data available for $pair"
    fi
done

if [ "$PROVIDER_FAILURES" -gt 0 ]; then
    echo "‚ö†Ô∏è Warning: $PROVIDER_FAILURES market data provider failures detected"
    if [ "$PROVIDER_FAILURES" -eq "${#PAIRS[@]}" ]; then
        echo "‚ùå All market data provider requests failed"
        exit 1
    fi
fi

# Check for database migrations
echo "Checking database migrations..."
if ! docker-compose exec backend python -c "from backend.database import check_migrations; print(check_migrations())"; then
    echo "‚ö†Ô∏è Warning: Database migration check failed"
else
    echo "‚úÖ Database migrations are up to date"
fi

# Test circuit breaker functionality
echo "Testing circuit breaker functionality..."
if ! curl -s -X POST "http://localhost:8000/api/circuit/test" | grep -q "success"; then
    echo "‚ö†Ô∏è Warning: Circuit breaker test failed"
else
    echo "‚úÖ Circuit breaker functionality verified"
fi

# Check error logs with more context
echo "Checking for errors in logs..."
ERROR_COUNT=$(docker-compose logs --tail=500 | grep -i "error" | wc -l)
if [ "$ERROR_COUNT" -gt 0 ]; then
    echo "‚ö†Ô∏è Warning: $ERROR_COUNT errors found in logs"
    if [ "$ERROR_COUNT" -gt 50 ]; then
        echo "‚ùå Error count in logs is too high: $ERROR_COUNT"
        docker-compose logs --tail=500 | grep -i "error" | head -20
        exit 1
    else
        echo "Showing recent errors:"
        docker-compose logs --tail=500 | grep -i "error" | head -10
    fi
fi

echo "üéâ Production readiness tests completed!"

# Comprehensive market readiness verification
echo "Verifying Market Requirements..."
echo "- Checking market data latency..."
LATENCY_DATA=$(curl -s "http://localhost:8000/api/market/latency")
echo "$LATENCY_DATA"

# Check maximum latency value
MAX_LATENCY=$(echo "$LATENCY_DATA" | grep -o '"max_latency":[0-9]*' | cut -d':' -f2)
if [ ! -z "$MAX_LATENCY" ] && [ "$MAX_LATENCY" -gt 2000 ]; then
    echo "‚ö†Ô∏è Warning: Maximum latency is high: ${MAX_LATENCY}ms"
fi

echo "- Verifying price feeds..."
for pair in "${PAIRS[@]}"; do
    PRICE_DATA=$(curl -s "http://localhost:8000/api/market/price/$pair")
    echo "$pair: $PRICE_DATA"
done

echo "- Testing order endpoints..."
ORDER_TEST=$(curl -s -X POST -H "Authorization: Bearer $API_TOKEN" "http://localhost:8000/api/order/test")
echo "$ORDER_TEST"

# Test backup functionality
echo "Testing backup functionality..."
if ! docker-compose exec backend python -c "from backend.utils.backup import test_backup; test_backup()"; then
    echo "‚ö†Ô∏è Warning: Backup functionality test failed"
else
    echo "‚úÖ Backup functionality verified"
fi

# Test emergency shutdown
echo "Testing emergency shutdown functionality..."
if ! curl -s -X POST -H "Authorization: Bearer $API_TOKEN" "http://localhost:8000/api/market/emergency-stop/test" | grep -q "success"; then
    echo "‚ö†Ô∏è Warning: Emergency shutdown test failed"
else 
    echo "‚úÖ Emergency shutdown functionality verified"
fi

echo "üìù Final Checklist:"
echo "1. ‚úì Verify market data provider credentials"
echo "2. ‚úì Check rate limits configuration"
echo "3. ‚úì Verify trading pairs whitelist"
echo "4. ‚úì Confirm risk management settings"
echo "5. ‚úì Backup all configurations"
echo "6. ‚úì Verify monitoring alerts"
echo "7. ‚úì Test emergency procedures"
echo "8. ‚úì Check scalability under load"

# Add Azure-specific checks
if command -v az &> /dev/null; then
    echo "üî∑ Azure Environment Checks..."
    
    # Check Azure Key Vault access
    echo "Testing Azure Key Vault access..."
    if [ ! -z "$KEY_VAULT_NAME" ]; then
        if ! az keyvault show --name "$KEY_VAULT_NAME" &> /dev/null; then
            echo "‚ö†Ô∏è Warning: Cannot access Azure Key Vault '$KEY_VAULT_NAME'"
        else
            echo "‚úÖ Azure Key Vault '$KEY_VAULT_NAME' is accessible"
        fi
    else
        echo "‚ö†Ô∏è Warning: KEY_VAULT_NAME not set"
    fi
    
    # Check Azure connectivity
    echo "Checking Azure connectivity..."
    if ! az account show &> /dev/null; then
        echo "‚ö†Ô∏è Warning: Not logged in to Azure"
    else
        ACCOUNT=$(az account show --query name -o tsv)
        echo "‚úÖ Connected to Azure account: $ACCOUNT"
    fi
else
    echo "‚ö†Ô∏è Azure CLI not installed - skipping Azure-specific checks"
fi

# Diagnostic Summary
echo "Diagnostic Summary:"
echo "- Container Status: $(docker-compose ps --services)"
echo "- Network Status: $(docker network ls | grep zion)"
echo "- Memory Usage: $(free -h | awk 'NR==2{print $3"/"$2}')"
echo "- Disk Usage: $(df -h / | awk 'NR==2{print $5}')"
echo "- Data Provider Status: $((${#PAIRS[@]} - $PROVIDER_FAILURES))/${#PAIRS[@]} working"
echo "- API Load Test: $SUCCESS_COUNT/100 successful requests"

# Ask if user wants to keep containers running for further manual testing
echo ""
echo "üöÄ Pre-market testing completed. Clean up containers? (y/n)"
read -r response
if [[ "$response" =~ ^([yY][eE][sS]|[yY])$ ]]; then
    # Cleanup
    echo "Cleaning up containers..."
    docker-compose down
    echo "‚úÖ Cleanup completed"
else
    echo "Containers left running for manual testing. Use 'docker-compose down' to clean up when finished."
fi
